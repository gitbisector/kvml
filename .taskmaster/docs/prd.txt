**Product Requirements Document (PRD): Dual ESP32-S3 Bluetooth HID Multiplexer**

---

**Project Title:**
Dual ESP32-S3 Bluetooth HID Multiplexer

**Objective:**
Create a hardware solution that routes input from USB keyboards and mice to two separate computers via Bluetooth. Two ESP32-S3 boards work as equal peers, each connecting to one host computer, with coordination handled through UART communication. Users switch between hosts using configurable hotkeys, providing seamless multi-host input without requiring network connectivity or complex configuration.

---

**Key Features:**

1. **Dual ESP32-S3 Peer-to-Peer System:**

   * Two ESP32-S3 boards operating as equal peers, no master/slave hierarchy.
   * Each board connects directly to one host computer via Bluetooth.
   * UART communication for coordination and hotkey synchronization.
   * Single firmware image deployed to both boards.

2. **Bluetooth HID Interface:**

   * Each ESP32-S3 connects to exactly one host computer.
   * Both boards act as composite mouse/keyboard devices.
   * Static BLE identity per board for reliable host reconnection.
   * Independent BLE connections, no cross-board routing.

3. **USB HID Device Handling:**

   * Support for composite mouse/keyboard devices (devices reporting as both mouse and keyboard interfaces).
   * Content-based USB HID report routing: analyze individual reports rather than device-level classification.
   * Multiple mouse format support: both 4-byte and 8-byte report formats with 16-bit movement data.
   * Button overlay system for hybrid mice that split buttons and movement across interfaces.
   * Raw USB HID keyboard reports forwarded unchanged; processed mouse movement data forwarded.
   * Any USB HID device can be connected to either board with automatic neighbor forwarding.

4. **Hotkey-Based Host Switching:**

   * Ctrl+Ctrl hotkey combination (two left Ctrl presses in quick succession) triggers host switching.
   * Robust hotkey detection with strict validation: only pure Left Ctrl presses (no other keys or modifiers) qualify.
   * Invalid sequences (Ctrl+C, Ctrl+Shift, etc.) are automatically rejected to prevent accidental switching.
   * Hotkey detection performed by the board with USB keyboard connected, regardless of active/inactive state.
   * Toggle behavior: active board becomes inactive, inactive board becomes active.
   * Works seamlessly in single board operation (toggles local state) and dual board operation (coordinates via UART).
   * Switch command broadcast via UART to coordinate state between boards when neighbor present.
   * Visual feedback via CapsLock LED blinking: briefly on when CapsLock off, briefly off when CapsLock on.
   * LED state change masking during blink prevents interference from host switching LED commands.
   * USB HID output reports control keyboard LEDs for user feedback with retry logic for busy USB conditions.
   * BLE HID output report support allows host operating systems to control keyboard LEDs (CapsLock, NumLock, ScrollLock).
   * Host-specific LED state caching maintains separate LED states for each connected BLE host.
   * LED state forwarding ensures only the active host's LED commands affect the physical USB keyboard.
   * Automatic LED state synchronization when switching between hosts applies the cached LED state of the newly active host.
   * Force-restoration of LED state after blink ensures hardware matches expected state regardless of timing conflicts.

5. **Input Routing and Neighbor Coordination:**

   * Input routing state management: only one board forwards USB input to BLE at a time.
   * Both boards maintain persistent BLE connections to their respective hosts.
   * Active board forwards USB input to BLE; inactive board sends idle reports to BLE.
   * UART coordination commands synchronize active/inactive states between boards.
   * Fire-and-forget architecture enables graceful single board operation.

6. **UART Inter-Board Communication Protocol:**

   * High-speed binary communication at 921600 baud using GPIO12 (TX) and GPIO13 (RX).
   * Frame structure: start_byte (0xAA), command, length (2 bytes), payload, CRC16 (2 bytes).
   * Auto-response system for connectivity testing without requiring physical loopback.
   * Fire-and-forget architecture prevents blocking when only one board is present.
   * Background listener task continuously monitors for incoming frames.
   * Command types: TEST_LOOPBACK (0xAB), TEST_RESPONSE (0xAC), PING/PONG (0xA0/0xA1).
   * USB HID report forwarding: USB_MOUSE (0x10), USB_KEYBOARD (0x11).
   * Input routing coordination: INPUT_ACTIVE (0x30), INPUT_INACTIVE (0x31).
   * Host switching coordination: HOST_SWITCH_REQUEST (0x20), HOST_SWITCH_ACK (0x21).
   * CRC16 validation ensures data integrity with automatic error detection.

7. **Local Configuration:**

   * NVS-based configuration storage (no SPIFFS required).
   * Hotkey combinations configurable per deployment.
   * BLE bonding information persistence.
   * Default fallback configuration if NVS corrupted.

8. **State Management:**

   * Each board maintains local active/inactive state.
   * Coordinated switching ensures mutual exclusion of input forwarding.
   * LED indicators show current state (active/inactive).
   * Automatic state recovery after power cycles or disconnections.

9. **Partitioning Scheme:**

    * Simplified single-application layout (no OTA complexity).
    * Flash layout optimized for ESP32-S3 with 4MB flash:
      * Bootloader (16KB): 0x0000 - 0x3FFF
      * Partition table (4KB): 0x8000 - 0x8FFF
      * NVS (32KB): 0x9000 - 0x10FFF (for BLE bonding and configuration)
      * PHY init (4KB): 0x11000 - 0x11FFF
      * Application (3.8MB): 0x12000 - 0x3FFFFF (single firmware image)

---

**Partition Table Specification:**

| Name      | Type   | SubType  | Size      | Offset   | Purpose |
| --------- | ------ | -------- | --------- | -------- | ------- |
| nvs       | data   | nvs      | 32 KB     | 0x9000   | BLE bonding, hotkey configuration |
| phy_init  | data   | phy      | 4 KB      | 0x11000  | PHY initialization data |
| factory   | app    | factory  | 3.8 MB    | 0x12000  | Single application image |

**Notes:**
- Simplified partition layout eliminates OTA complexity
- Large application partition accommodates comprehensive feature set
- NVS partition sized for extensive BLE bonding storage
- No SPIFFS partition required (eliminates web UI dependency)
- Total used space: ~3.9MB with room for future expansion

---

**Development Deliverables:**

* Single ESP-IDF firmware image for both boards.
* USB host functionality with composite mouse/keyboard device support.
* Content-based USB HID report routing with format detection.
* BLE HID profile with mouse/keyboard composite device.
* UART protocol stack with frame-based communication and CRC validation.
* Auto-response system for neighbor connectivity testing.
* USB HID report forwarding with fire-and-forget architecture.
* Background listener task for real-time inter-board communication.
* Neighbor coordination module for peer-to-peer communication.
* Ctrl+Ctrl hotkey detection and processing system with timing validation.
* State management for active/inactive host coordination.
* CapsLock LED feedback system via USB HID output reports for host switching indication.
* BLE HID output report handling for receiving LED control commands from host operating systems.
* Host-specific LED state caching system to maintain separate LED states per connected BLE host.
* LED state forwarding mechanism that only applies LED commands from the currently active host to the USB keyboard.
* Automatic LED synchronization during host switching to apply the cached LED state of the newly active host.
* Robust error handling and connection recovery.

---

**Constraints & Considerations:**

* No assumptions about USB port/device consistency.
* HID reports must represent full state, not deltas.
* BLE pairing must persist across reboots and power cycles.
* UART communication must recover from frame loss or corruption.
* Hotkey combinations must be distinguishable from normal typing.
* State synchronization must handle network partitions gracefully.
* LED indicators must be clearly visible and intuitive.
* No network connectivity requirements (WiFi/Ethernet independent).

---

**Target Users:**
Advanced users and developers requiring seamless multi-host input switching without software dependencies, network configuration, or complex setup procedures.

---

**Approval & Handoff:**
This document defines the complete functional design. Any ambiguities or enhancements should be resolved with the product owner prior to implementation.
