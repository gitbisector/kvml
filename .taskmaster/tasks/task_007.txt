# Task ID: 7
# Title: Web Server Implementation for Configuration UI
# Status: deferred
# Dependencies: 1, 5
# Priority: low
# Description: Implement a web server on the primary board to host the configuration interface for the multiplexer system.
# Details:
1. Initialize ESP-IDF HTTP server component
2. Mount SPIFFS filesystem for web content
3. Implement API endpoints for configuration:
   - GET /api/status - System status
   - POST /api/host - Set active host
   - GET/POST /api/config - Get/set board roles
   - POST /api/ota - Upload firmware
4. Create HTML/CSS/JS files for web interface
5. Implement WebSocket for real-time updates (optional)
6. Add authentication for security

API structure:
```c
// Status response format
typedef struct {
    active_host_t active_host;
    board_role_t board_role;
    bool keyboard_connected;
    bool mouse_connected;
    uint8_t ble_connections;
    char version[16];
} system_status_t;

// Configuration format
typedef struct {
    board_role_t board_role;
    bool hotkey_enabled;
    uint8_t hotkey_code;
    uint16_t hotkey_timeout_ms;
} system_config_t;
```

# Test Strategy:
Test web interface with different browsers. Verify all API endpoints function correctly. Test configuration changes persist across reboots. Validate security measures prevent unauthorized access.

# Subtasks:
## 1. Initialize ESP-IDF HTTP Server [pending]
### Dependencies: None
### Description: Set up and configure the ESP-IDF HTTP server component on the primary board.
### Details:
1. Include necessary ESP-IDF components
2. Initialize the HTTP server
3. Configure server settings (port, max connections)
4. Start the HTTP server

## 2. Implement SPIFFS Filesystem Integration [pending]
### Dependencies: 7.1
### Description: Mount the SPIFFS filesystem to serve static web content for the configuration interface.
### Details:
1. Initialize SPIFFS
2. Mount SPIFFS filesystem
3. Configure HTTP server to serve static files from SPIFFS
4. Implement error handling for file operations

## 3. Develop API Endpoints [pending]
### Dependencies: 7.1, 7.2
### Description: Implement the required API endpoints for system configuration and status.
### Details:
1. Implement GET /api/status endpoint using system_status_t structure
2. Implement POST /api/host endpoint for setting active host
3. Implement GET/POST /api/config endpoints using system_config_t structure
4. Implement POST /api/ota endpoint for firmware updates
5. Add proper error handling and response codes

## 4. Create Web Interface Files [pending]
### Dependencies: 7.2
### Description: Develop the HTML, CSS, and JavaScript files for the configuration web interface.
### Details:
1. Design responsive HTML structure
2. Create CSS for styling and layout
3. Implement JavaScript for dynamic content and API interactions
4. Optimize assets for embedded system constraints

## 5. Implement Authentication and WebSocket [pending]
### Dependencies: 7.1, 7.3, 7.4
### Description: Add authentication for security and implement WebSocket for real-time updates.
### Details:
1. Implement user authentication system
2. Secure all API endpoints with authentication
3. Set up WebSocket server for real-time communication
4. Implement WebSocket handlers for pushing updates to clients
5. Update web interface to use WebSocket for live data

